-- Producent-konsument dla bufora cyklicznego rozmiaru N.
-- Jeden task jest producentem, drugi konsumentem.

-- specyfikacja obiektu chronionego OCh
protected OCh is
  --specyfikacja procedur, funkcji, wejsc

entry E(..);
procedure E();
function E() return Typ_zwracany;
[private
  --prywatna czesc specyfikacji
]
end OCh;

  --tresc obiektu chronione OCh
protected body OCh is
  --tresc procedur, funkcji lub wejsc (z warunkami - barierami)
end OCh;




-- specyfikacja typu chronionego
protected type Nazwa
  [Wyroznik] is
  [Specyfikacja_podprogramu | Deklaracja_wejscia]
  [private
    [Specyfikacja_podprogramu | Deklaracja_wejscia]
    ...
  ]




protected SB is
  entry Czekaj;
  procedure Sygnalizuj
  private
  Sem: Boolean := True;
  end SB;

protected body SB is
  entry Czekaj when Sem is
  begin
    Sem := False;
  end Czekaj;

procedure Sygnalizuj is
  begin
    Sem := True;
  end Sygnalizuj;

end SB;



protected Buf is
  entry Wstaw  (Ch : in  Character);
  entry Pobierz(Ch : out Character);

  private
  B     : Character;
  Pusty : Boolean := True;
end Buf;


protected body Buf is

  entry Wstaw (Ch : in Character) when Pusty is
  begin
    B := Ch;
    Pusty := False;
  end Wstaw;

  entry Pobierz(Ch : out Character) when not Pusty is
  begin
    Ch := B;
    Pusty := True;
  end Pobierz;

end Buf;




task Buf is
  entry Wstaw  (Ch : in  Character);
  entry Pobierz(Ch : out Character);
end Buf;

task body Buf is
  B     : Character;
  Pusty : Boolean := True;

begin
  loop select
    when Pusty      => accept Wstaw  (Ch : in  Character) do
  begin
    B := Ch;
    Pusty := False;
  or when not Pusty => accept Pobierz(Ch : out Character) do
  begin
    Ch := B;
    Pusty := True;
  --end;?

end Buf;






task Producent;
task body Producent is
begin
  loop
    Bufor.Wstaw(..);
  end loop;
end Producent;


task Konsument;
task body Konsument is
begin
  loop
    Bufor.Pobierz(..);
  end loop;
end Konsument;
